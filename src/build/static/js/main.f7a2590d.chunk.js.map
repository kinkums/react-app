{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","pages/article-content.js","components/AddCommentForm.js","components/CommentsList.js","components/UpvotesSection.js","pages/ArticlePage.js","components/ArticlesList.js","pages/ArticlesListPage.js","components/NavBar.js","pages/NotFoundPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","AboutPage","articles","name","title","content","AddCommentForm","articleName","setArticleInfo","useState","setName","commentText","setCommentText","addComment","a","fetch","method","body","JSON","stringify","postedBy","text","headers","response","json","id","type","value","onChange","event","target","rows","cols","onClick","CommentsList","comments","map","comment","className","key","UpvotesSection","upvotes","upvoteArticle","ArticlePage","articleInfo","useParams","useEffect","result","fetchArticleInfo","matchingArticle","find","article","paragraph","ArticlesList","to","substring","ArticlesListPage","NavBar","NotFoundPage","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7a2590d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const HomePage = () => (\r\n  <>\r\n    <h1>Hello, welcome to my blog!</h1>\r\n    <p>\r\n      This is my first blog and I would be writing articles on various topics\r\n      for your reference. You can read these articles to gain some information,\r\n      or at your leisure, or to utilize the information mentioned in the\r\n      articles at your work / travel etc.\r\n    </p>\r\n\r\n    <p>\r\n      If you like my articles, you can upvote. A comments section is also\r\n      available for my articles. Please feel free to provide your comments so\r\n      that I can maintain / improve the content on this blog site.The articles\r\n      in this blog would be added on regular basis for your convenience.\r\n    </p>\r\n  </>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const AboutPage = () => (\r\n  <>\r\n    <h2>Kiran Kumar Chennakeshavula</h2>\r\n\r\n    <p>\r\n      Is an Information Technology Professional with interest in Chess, Yoga,\r\n      Travel, Wild life, Music & Beverages etc. In Software, he has essayed\r\n      roles of Program / Project Manager, Technical Architect, Scrum Master,\r\n      Business Analyst and Technical Trainer. He is married to Radhika (IT\r\n      Professional) and has two kids - Meghana and Sanjana (both girls).\r\n    </p>\r\n\r\n    <p>\r\n      Loves to share his knowledge on various aspects with the rest of the\r\n      world. He also has passion for learning new languages, though he rarely\r\n      does so. He would be presenting the articles on various topics in this\r\n      blog. Some of the content are his own thoughts and some content has been\r\n      taken from multiple resources / sites and shared for your quick reference.\r\n    </p>\r\n  </>\r\n);\r\n","const articles = [\r\n  {\r\n    name: \"yoga\",\r\n    title: \"What is Yoga\",\r\n    content: [\r\n      `The word \"Yoga\" comes from the Sanskrit language, meaning union or merger. The goal of this\r\n       discipline is to strike a balance between body, mind and breath, with the ultimate aim of attaining\r\n       self-enlightenment. It has been estimated by some scholars that Yoga is about 5000 years old.\r\n       Several scientists also claim that it is a highly developed and scientific discipline for healthy\r\n       living that has been perfected through milleniums.`,\r\n      `Lord Krishna says to Arjuna: “Howsoever men approach Me, even so\r\n      do I reward them, for, the path men take from every side, is Mine, O Partha.” The four paths are: the\r\n      path of work (Karma-Yoga), the path of devotion or love (Bhakti-Yoga), the path of psychic control\r\n      (Raja-Yoga) and the path of self-analysis and knowledge (Jnana-Yoga).`,\r\n    ],\r\n  },\r\n  {\r\n    name: \"south-america\",\r\n    title: \"Fascinating Things to do in South America\",\r\n    content: [\r\n      `There are experiences on a trip to South America which you can enjoy that are different and unusual…\r\n       and you don’t have to hack your way through the Amazon jungle or climb the Andes Mountains..`,\r\n      `Take a Helicopter Ride Over Iguassu Falls`,\r\n      `This waterfall is shared by three different countries – Argentina, Brazil, and Paraguay. However,\r\n       just about all visitors will view it from Argentina and/or Brazil. Iguassu Falls (or as the \r\n      Argentineans call it, Iguazu Falls) has the largest average annual flow of water, more than any\r\n      other waterfall in the world. About three-quarters of the total length of the falls are on\r\n      the Argentinean side. The most impressive part of the falls is called Devil’s Throat, shared between\r\n      both sides. One way to really experience the dramatic majesty of these falls on Argentina tours\r\n      is to take an unforgettable helicopter ride from Foz do Iguacu on the Brazilian side.`,\r\n      `Stargaze in the Atacama Desert, Chile`,\r\n      `The Atacama Desert stretches a distance of 1000 kilometres/620 miles to the north of Santiago.\r\n       It is known as the driest place in the world with some areas having no recorded incidence of rain.\r\n       The spectacular landscapes are breathtaking. There is exceptional nature in the form of salt\r\n       flats, lagoons, volcanoes, natural hot springs, and geysers. The night sky is beyond belief\r\n       and has been recognized as the clearest sky anywhere.`,\r\n      `Cruise on the Amazon River, Brazil`,\r\n      `I can’t think of many other places where you are, in certain respects, in unchartered territory\r\n        than the Amazon region. The rainforest stretches across nine countries and contains half of the\r\n        earth’s remaining tropical forests. The Amazon River is the second-longest river in the world.\r\n        On Brazil travel, you can take a cruise starting from Manaus. Situated in the heart of the rainforest,\r\n        Manaus is the largest city in the Brazilian Amazon and is located on the Rio Negro a few miles before\r\n        it meets the Rio Solimoes to form the Amazon River, properly called the Meeting of the Waters.`,\r\n    ],\r\n  },\r\n  {\r\n    name: \"about-cockroachDB\",\r\n    title: \"About CockroachDB\",\r\n    content: [\r\n      `A relational database for next generation, cloud-native applications.\r\n           It is a scalable and a distributed SQL. CockroachDB offers the familiarity and\r\n           power of SQL with the comfort of your existing ORM's. Automated sharding ensures\r\n           great performance as you scale.`,\r\n      `Designed for Resilience and Latency. \r\n           CockroachDB offers a multi-region database that operates with single-region latency and\r\n           ensures data is always available and an RPO of zero.`,\r\n      `Your applications and services are distributed. Your database should be, too. \r\n           Cloud-based architectures allow you to deploy your applications anywhere. Scale your\r\n           database, move data close to your users, and ensure high performance everywhere with\r\n           Distributed SQL.`,\r\n      `Scale your data, not your operational complexity. \r\n           CockroachDB is ACID compliant, and scales globally without the need for a massive\r\n           architectural overhaul. Simply add a new node to the cluster and CockroachDB takes \r\n           care of balancing data across instances and geographies.`,\r\n    ],\r\n  },\r\n];\r\n\r\nexport default articles;\r\n","import React, { useState } from \"react\";\r\n\r\nexport const AddCommentForm = ({ articleName, setArticleInfo }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [commentText, setCommentText] = useState(\"\");\r\n\r\n  const addComment = async () => {\r\n    const response = await fetch(`/api/articles/${articleName}/add-comment`, {\r\n      method: \"post\",\r\n      body: JSON.stringify({\r\n        postedBy: name,\r\n        text: commentText,\r\n      }),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    const body = await response.json();\r\n    setArticleInfo(body);\r\n    setName(\"\");\r\n    setCommentText(\"\");\r\n  };\r\n  return (\r\n    <diV id=\"add-comment-form\">\r\n      <h3>Add a Comment</h3>\r\n      <label>\r\n        Name:\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n      </label>\r\n      <label>\r\n        Comment:\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={commentText}\r\n          onChange={(event) => setCommentText(event.target.value)}\r\n        />\r\n      </label>\r\n      <button onClick={() => addComment()}>Add Comment</button>\r\n    </diV>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { AddCommentForm } from \"./AddCommentForm\";\r\n\r\nexport const CommentsList = ({ comments, articleName, setArticleInfo }) => (\r\n  <>\r\n    <h3>Comments:</h3>\r\n    {comments.map((comment) => (\r\n      <div className=\"comment\" key={comment.text}>\r\n        <h4>{comment.postedBy}</h4>\r\n        <p>{comment.text}</p>\r\n      </div>\r\n    ))}\r\n    <AddCommentForm articleName={articleName} setArticleInfo={setArticleInfo} />\r\n  </>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const UpvotesSection = ({ upvotes, articleName, setArticleInfo }) => {\r\n  const upvoteArticle = async () => {\r\n    const response = await fetch(`/api/articles/${articleName}/upvote`, {\r\n      method: \"post\",\r\n    });\r\n    const body = await response.json();\r\n    setArticleInfo(body);\r\n  };\r\n\r\n  return (\r\n    <div id=\"upvotes-section\">\r\n      <button\r\n        onClick={() => {\r\n          upvoteArticle();\r\n        }}\r\n      >\r\n        {\" \"}\r\n        Add Upvote{\" \"}\r\n      </button>\r\n      <p>This article has {upvotes} upvotes</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport articles from \"./article-content\";\r\nimport { CommentsList } from \"../components/CommentsList\";\r\nimport { UpvotesSection } from \"../components/UpvotesSection\";\r\n\r\nexport const ArticlePage = () => {\r\n  const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\r\n  const { name } = useParams(); // name is the parameter defined earlier in App,js Route Path\r\n\r\n  useEffect(() => {\r\n    const fetchArticleInfo = async () => {\r\n      const result = await fetch(`/api/articles/${name}`);\r\n      const body = await result.json();\r\n      setArticleInfo(body);\r\n    };\r\n    fetchArticleInfo();\r\n  }, [name]);\r\n\r\n  const matchingArticle = articles.find((article) => article.name === name);\r\n\r\n  return matchingArticle ? (\r\n    <>\r\n      <h1>{matchingArticle.title}</h1>\r\n      <UpvotesSection\r\n        upvotes={articleInfo.upvotes}\r\n        articleName={name}\r\n        setArticleInfo={setArticleInfo}\r\n      />\r\n      {matchingArticle.content.map((paragraph) => (\r\n        <p key={paragraph}>{paragraph}</p>\r\n      ))}\r\n      <CommentsList\r\n        comments={articleInfo.comments}\r\n        articleName={name}\r\n        setArticleInfo={setArticleInfo}\r\n      />\r\n    </>\r\n  ) : (\r\n    <h1>Uh Oh! Article doesn't exist</h1>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const ArticlesList = ({ articles }) => (\r\n  <>\r\n    {articles.map((article) => (\r\n      <Link\r\n        to={`/articles/${article.name}`}\r\n        className=\"article-list-item\"\r\n        key={article.name}\r\n      >\r\n        <h3>{article.title}</h3>\r\n        <p>{article.content[0].substring(0, 150)}...</p>\r\n      </Link>\r\n    ))}\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport articles from \"./article-content\";\r\nimport { ArticlesList } from \"../components/ArticlesList\";\r\n\r\nexport const ArticlesListPage = () => (\r\n  <>\r\n    <h1>Articles</h1>\r\n    <ArticlesList articles={articles} />\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const NavBar = () => (\r\n  <nav>\r\n    <ul>\r\n      <li>\r\n        <Link to=\"/\">Home</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/about\">About</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/articles\">Articles</Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n","import React from \"react\";\r\n\r\nexport const NotFoundPage = () => <h1>404: Page Not Found</h1>;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { AboutPage } from \"./pages/AboutPage\";\nimport { ArticlePage } from \"./pages/ArticlePage\";\nimport { ArticlesListPage } from \"./pages/ArticlesListPage\";\nimport { NavBar } from \"./components/NavBar\";\nimport { NotFoundPage } from \"./pages/NotFoundPage\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <div id=\"page-body\">\n          <Switch>\n            <Route path=\"/\" exact>\n              <HomePage />\n            </Route>\n            <Route path=\"/about\">\n              <AboutPage />\n            </Route>\n            <Route path=\"/articles\" exact>\n              <ArticlesListPage />\n            </Route>\n            <Route path=\"/articles/:name\">\n              <ArticlePage />\n            </Route>\n            <Route>\n              <NotFoundPage />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}